{
  "Next.js Page Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "nxpage",
    "body": [
      "import { Metadata } from 'next';",
      "",
      "export const metadata: Metadata = {",
      "  title: '${1:Page Title}',",
      "  description: '${2:Page description}',",
      "};",
      "",
      "export default function ${3:PageName}() {",
      "  return (",
      "    <div className=\"${4:container mx-auto px-4 py-8}\">",
      "      <h1 className=\"text-3xl font-bold\">${5:Page Content}</h1>",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Create a Next.js page component with metadata",
  },
  "Next.js Layout Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "nxlayout",
    "body": [
      "import { ReactNode } from 'react';",
      "",
      "interface ${1:Layout}Props {",
      "  children: ReactNode;",
      "}",
      "",
      "export default function ${1:Layout}({ children }: ${1:Layout}Props) {",
      "  return (",
      "    <div className=\"${2:min-h-screen}\">",
      "      ${3:<!-- Layout content -->}",
      "      {children}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Create a Next.js layout component",
  },
  "React Component with Props": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfc",
    "body": [
      "interface ${1:Component}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "export default function ${1:Component}({ ${2:prop} }: ${1:Component}Props) {",
      "  return (",
      "    <div className=\"${4:}\">",
      "      ${5:Component content}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Create a React functional component with TypeScript props",
  },
  "React Client Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "rcc",
    "body": [
      "'use client';",
      "",
      "import { ${1:useState} } from 'react';",
      "",
      "interface ${2:Component}Props {",
      "  ${3:prop}: ${4:string};",
      "}",
      "",
      "export default function ${2:Component}({ ${3:prop} }: ${2:Component}Props) {",
      "  const [${5:state}, ${6:setState}] = useState${7:<string>}(${8:''});",
      "",
      "  return (",
      "    <div className=\"${9:}\">",
      "      ${10:Component content}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Create a React client component with state",
  },
  "Custom Hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "interface Use${1:Hook}Return {",
      "  ${2:data}: ${3:any};",
      "  ${4:loading}: boolean;",
      "  ${5:error}: string | null;",
      "}",
      "",
      "export function use${1:Hook}(): Use${1:Hook}Return {",
      "  const [${2:data}, set${2/(.*)/${1:/capitalize}/}] = useState${6:<any>}(${7:null});",
      "  const [${4:loading}, set${4/(.*)/${1:/capitalize}/}] = useState(false);",
      "  const [${5:error}, set${5/(.*)/${1:/capitalize}/}] = useState<string | null>(null);",
      "",
      "  useEffect(() => {",
      "    ${8:// Hook logic}",
      "  }, []);",
      "",
      "  return { ${2:data}, ${4:loading}, ${5:error} };",
      "}",
    ],
    "description": "Create a custom React hook",
  },
  "API Route Handler": {
    "scope": "typescript",
    "prefix": "api",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export async function ${1:GET}(request: NextRequest) {",
      "  try {",
      "    ${2:// API logic}",
      "    ",
      "    return NextResponse.json({ ${3:success: true} });",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      { error: '${4:Internal Server Error}' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
    ],
    "description": "Create a Next.js API route handler",
  },
  "Server Action": {
    "scope": "typescript",
    "prefix": "action",
    "body": [
      "'use server';",
      "",
      "import { revalidatePath } from 'next/cache';",
      "",
      "export async function ${1:actionName}(formData: FormData) {",
      "  try {",
      "    ${2:// Server action logic}",
      "    ",
      "    revalidatePath('${3:/}');",
      "    return { success: true };",
      "  } catch (error) {",
      "    console.error('Server Action Error:', error);",
      "    return { error: '${4:Something went wrong}' };",
      "  }",
      "}",
    ],
    "description": "Create a Next.js server action",
  },
}
